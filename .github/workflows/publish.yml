name: Release

on:
  workflow_dispatch:
  push:
    branches:
      - main

defaults:
  run:
    shell: bash

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    environment: npm-publish
    outputs:
      hasChangesets: ${{ steps.store-has-changesets.outputs.hasChangesets }}
    permissions:
      contents: write # This allows us to push to the repository and create GitHub releases
      pull-requests: write # This allows us to create pull requests
      id-token: write # Provenance generation in GitHub Actions requires "write" access to the "id-token" permission
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0
          # NOTE: If we use default GITHUB_TOKEN to create the release PR, the checks on the release PR will not be triggered automatically
          token: ${{ secrets.RELEASE_GITHUB_TOKEN || github.token }}

      - name: Set up the environment
        uses: ./.github/actions/setup-env

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Create release Pull Request
        id: pr
        env:
          # NOTE: If we use the default GITHUB_TOKEN to create the release PR, the checks on the release PR will not be triggered automatically
          GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN || github.token }}
        uses: changesets/action@v1
        with:
          title: Version Packages (v3)
          version: pnpm version-for-release

      - name: Store hasChangesets for other jobs
        id: store-has-changesets
        run: |
          echo "hasChangesets=${{steps.pr.outputs.hasChangesets}}"
          echo "hasChangesets=${{steps.pr.outputs.hasChangesets}}" >> $GITHUB_OUTPUT

      # - name: Build All Packages
      #   if: steps.pr.outputs.hasChangesets == 'false'
      #   run: pnpm run --recursive -no-bail --filter './packages/**' --if-present build

      - name: Publish All Packages (dry-run)
        if: steps.pr.outputs.hasChangesets == 'false'
        run: pnpm publish --filter "./packages/**" -r --no-git-checks --access public --dry-run --report-summary

      - name: Store the package list to be published
        if: steps.pr.outputs.hasChangesets == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: pnpm-publish-summary.json
          path: pnpm-publish-summary.json
          retention-days: 2
          overwrite: true
          if-no-files-found: error

      - name: Pack
        if: steps.pr.outputs.hasChangesets == 'false'
        id: pack
        run: |
          jq -r '.publishedPackages[].name' pnpm-publish-summary.json | while IFS= read -r name; do
            pnpm pack -r --filter "$name" --pack-destination tarballs
          done
        # run: |
        #   FILENAME=$(pnpm pack --json | jq -r .filename)
        #   echo "FILENAME=$FILENAME"
        #   echo "filename=$FILENAME" >> $GITHUB_OUTPUT
          
      - name: Upload packed tarballs
        if: steps.pr.outputs.hasChangesets == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: tarballs
          path: tarballs
          retention-days: 2
          overwrite: true
          if-no-files-found: error

      # - name: Publish All Packages
      #   id: publish
      #   if: steps.pr.outputs.hasChangesets == 'false'
      #   # env:
      #   #   NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
      #   #   NPM_CONFIG_PROVENANCE: true
      #   run: pnpm publish --filter "./packages/**" -r --no-git-checks --access public

      # - name: Create Git tags for packages
      #   if: steps.pr.outputs.hasChangesets == 'false'
      #   run: pnpm changeset tag

      # - name: Push Git tags
      #   if: steps.pr.outputs.hasChangesets == 'false'
      #   run: git push --follow-tags

      
  review:
    needs: prepare
    if: needs.prepare.outputs.hasChangesets == 'false'

    runs-on: ubuntu-latest
    permissions:
      actions: read # To download the tarball to review
    steps:
      - name: Download pnpm list json
        uses: actions/download-artifact@v5
        with:
          name: pnpm-publish-summary.json
          path: .

      - name: Download tarballs
        uses: actions/download-artifact@v5
        with:
          name: tarballs
          path: tarballs

      - run: ls -la
      - run: ls -la tarballs

      - name: Download previous "latest" version tarballs
        run: |
          jq -r '.publishedPackages[] | "\(.name)|\(.version)"' pnpm-publish-summary.json |
          while IFS='|' read -r name version; do
            TARBALL_URL=$(npm view "$name@latest" dist.tarball)
            curl -L "$TARBALL_URL" -o "tarballs/$name-latest.tgz"
          done

      - run: ls -la
      - run: ls -la tarballs

      # - name: Download previous "@${{ env.NPM_TAG }}" version tarball
      #   run: |
      #     TARBALL_URL=$(npm view "${{ needs.prepare.outputs.packageName }}@${{ env.NPM_TAG }}" dist.tarball)
      #     curl -L "$TARBALL_URL" -o ${{ env.NPM_TAG }}.tgz
      #     TARBALL_NAME=$(basename "$TARBALL_URL")
      #     echo "Downloaded $TARBALL_NAME as ${{ env.NPM_TAG }}.tgz"
      # - name: Prepare tarballs for comparisons
      #   run: |
      #     mkdir ${{ env.NPM_TAG }}
      #     tar -xzf ${{ env.NPM_TAG }}.tgz -C ${{ env.NPM_TAG }}
      #     mkdir proposed-version
      #     tar -xzf ${{ needs.prepare.outputs.filename }} -C proposed-version
      # - name: List new, changed and deleted files
      #   run: |
      #     git diff --color=always --no-index --name-status ${{ env.NPM_TAG }} proposed-version || true
      # - name: Compare package.json files
      #   run: |
      #     git diff --color=always --no-index ${{ env.NPM_TAG }}/package/package.json proposed-version/package/package.json  || true