name: Create release PR / Publish packages

on:
  workflow_dispatch:
  push:
    branches:
      - main

defaults:
  run:
    shell: bash

jobs:
  pr:
    name: Conditionally create a release PR
    runs-on: ubuntu-latest
    outputs:
      hasChangesets: ${{ steps.store-has-changesets.outputs.hasChangesets }}
    permissions:
      pull-requests: write # This allows us to create pull requests
      contents: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0
          # NOTE: If we use default GITHUB_TOKEN to create the release PR, the checks on the release PR will not be triggered automatically
          token: ${{ secrets.RELEASE_GITHUB_TOKEN || github.token }}

      - name: Set up the environment
        uses: ./.github/actions/setup-env

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Create release Pull Request
        id: pr
        env:
          # NOTE: If we use the default GITHUB_TOKEN to create the release PR, the checks on the release PR will not be triggered automatically
          GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN || github.token }}
        uses: changesets/action@v1
        with:
          title: Version Packages (v3)
          version: pnpm version-for-release

      - name: Store hasChangesets for subsequent jobs
        id: store-has-changesets
        run: |
          echo "hasChangesets=${{steps.pr.outputs.hasChangesets}}"
          echo "hasChangesets=${{steps.pr.outputs.hasChangesets}}" >> $GITHUB_OUTPUT

  pack:
    name: Generate tarballs for publishing
    needs: pr
    if: needs.pr.outputs.hasChangesets == 'false'
    runs-on: ubuntu-latest
    permissions:
      contents: write # This allows us to push to the repository and create GitHub releases
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5

      - name: Set up the environment
        uses: ./.github/actions/setup-env

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Publish All Packages (dry-run) and save list of packages that need publishing
        run: pnpm publish --filter "./packages/**" -r --no-git-checks --access public --dry-run --report-summary

      - name: Store the package list to be published
        uses: actions/upload-artifact@v4
        with:
          name: pnpm-publish-summary.json
          path: pnpm-publish-summary.json
          retention-days: 2
          overwrite: true
          if-no-files-found: error

      - name: Generate tarballs for packages that need publishing
        id: pack
        run: |
          jq -r '.publishedPackages[].name' pnpm-publish-summary.json | while IFS= read -r name; do
            pnpm pack -r --filter "$name" --pack-destination tarballs
          done
          
      - name: Upload packed tarballs
        uses: actions/upload-artifact@v4
        with:
          name: tarballs
          path: tarballs
          retention-days: 2
          overwrite: true
          if-no-files-found: error
      
  review:
    name: Review diffs
    needs: pack

    runs-on: ubuntu-latest
    permissions:
      actions: read # To download the tarballs to review
    steps:
      - name: Download pnpm list json
        uses: actions/download-artifact@v5
        with:
          name: pnpm-publish-summary.json
          path: .

      - name: Download tarballs
        uses: actions/download-artifact@v5
        with:
          name: tarballs
          path: tarballs

      - name: Show diff between published and proposed packages
        run: |
          jq -r '.publishedPackages[] | "\(.name)|\(.version)"' pnpm-publish-summary.json |
          while IFS='|' read -r name version; do
            # download latest
            TARBALL_URL=$(npm view "$name@latest" dist.tarball)
            curl -s -L "$TARBALL_URL" -o "tarballs/$name-latest.tgz"

            # unpack both latest and proposed version
            mkdir -p tarballs/$name/proposed
            mkdir -p tarballs/$name/latest
            tar -xzf tarballs/$name-latest.tgz -C tarballs/$name/latest
            tar -xzf tarballs/$name-$version.tgz -C tarballs/$name/proposed

            # show diffs for review
            echo "<< Showing files diff for $name >>"
            git diff --color=always --no-index --name-status tarballs/$name/latest tarballs/$name/proposed || true
            echo "<< Showing package.json diff for $name >>"
            git diff --color=always --no-index tarballs/$name/latest/package/package.json tarballs/$name/proposed/package/package.json || true
          done

  publish:
    name: Publish packages
    needs: review
    runs-on: ubuntu-latest
    environment: npm-publish
    permissions:
      actions: read # To download the tarball to publish
      id-token: write ## Needed for npm Trusted Publishing (OIDC)
    steps:
      - name: Download tarballs
        uses: actions/download-artifact@v5
        with:
          name: tarballs
          path: tarballs
      - name: Setup node to be able to update npm
        uses: actions/setup-node@v5
        with:
          node-version: lts/*
      - name: Update npm to make sure it supports Trusted Publishing
        run: npm install -g npm@latest
      - name: Publish
        run: |
          cd tarballs
          for filename in *.tgz; do
            echo "Publishing $filename"
            npm publish $filename --tag latest
          done

  tag:
    name: Push tags
    needs: publish
    runs-on: ubuntu-latest
    permissions:
      contents: write # This allows us to push to the repository and create GitHub releases
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_GITHUB_TOKEN || github.token }}

      - name: Set up the environment
        uses: ./.github/actions/setup-env

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Create Git tags for packages
        run: pnpm changeset tag

      - name: Push Git tags
        run: |
          # First push commits (if any)
          git push origin HEAD:${{ github.ref_name }}
          # Then push tags explicitly
          git push origin --tags